# -*- coding: utf-8 -*-
"""prediksiusiadanJK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nejSWp5U8xqzG2VqdERIdudIF-QVqTud

<a href="https://colab.research.google.com/github/misbah4064/age_and_gender_detection/blob/master/age%26genderDetection.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""

import cv2 as cv
import tkinter as tk

# Inisialisasi Tkinter untuk mendapatkan ukuran layar
root = tk.Tk()
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
root.withdraw()  # Sembunyikan jendela Tkinter

# Load model paths (Pastikan lokasi model sesuai dengan GitHub)
faceProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\opencv_face_detector.pbtxt"
faceModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\opencv_face_detector_uint8.pb"

ageProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\age_deploy.prototxt"
ageModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\age_net.caffemodel"

genderProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\gender_deploy.prototxt"
genderModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\gender_net.caffemodel"

MODEL_MEAN_VALUES = (78.4263377603, 87.7689143744, 114.895847746)
ageList = ['(0-2 Tahun)', '(4-6 Tahun)', '(8-12 Tahun)', '(15-20 Tahun)', '(25-32 Tahun)', '(38-43 Tahun)', '(48-53 Tahun)', '(60-100 Tahun)']
genderList = ['Pria', 'Wanita']

# Load networks
faceNet = cv.dnn.readNet(faceModel, faceProto)
ageNet = cv.dnn.readNet(ageModel, ageProto)
genderNet = cv.dnn.readNet(genderModel, genderProto)

padding = 5

# Fungsi untuk mendapatkan bounding box wajah
def getFaceBox(net, frame, conf_threshold=0.7):
    frameOpencvDnn = frame.copy()
    frameHeight, frameWidth = frame.shape[:2]
    blob = cv.dnn.blobFromImage(frameOpencvDnn, 1.0, (300, 300), [104, 117, 123], True, False)

    net.setInput(blob)
    detections = net.forward()
    bboxes = []

    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > conf_threshold:
            x1 = int(detections[0, 0, i, 3] * frameWidth)
            y1 = int(detections[0, 0, i, 4] * frameHeight)
            x2 = int(detections[0, 0, i, 5] * frameWidth)
            y2 = int(detections[0, 0, i, 6] * frameHeight)

            # Proteksi jika ukuran box terlalu kecil
            if (x2 - x1) < 50 or (y2 - y1) < 50:
                continue

            bboxes.append([x1, y1, x2, y2])
            cv.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (0, 255, 0), int(round(frameHeight/150)), 8)

    return frameOpencvDnn, bboxes

# Fungsi untuk deteksi umur dan gender
def age_gender_detector(frame):
    frameFace, bboxes = getFaceBox(faceNet, frame)

    if not bboxes:
        cv.putText(frameFace, "Wajah tidak terdeteksi/terhalang benda", (50, 50),
                   cv.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv.LINE_AA)
        return frameFace

    for bbox in bboxes:
        face = frame[max(0, bbox[1]-padding):min(bbox[3]+padding, frame.shape[0]-1),
                     max(0, bbox[0]-padding):min(bbox[2]+padding, frame.shape[1]-1)]

        if face.shape[0] < 20 or face.shape[1] < 20:
            cv.putText(frameFace, "Wajah tidak terdeteksi/terhalang benda", (bbox[0], bbox[1] - 10),
                       cv.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2, cv.LINE_AA)
            continue

        blob = cv.dnn.blobFromImage(face, 1.0, (227, 227), MODEL_MEAN_VALUES, swapRB=False)

        genderNet.setInput(blob)
        genderPreds = genderNet.forward()
        gender = genderList[genderPreds[0].argmax()]

        ageNet.setInput(blob)
        agePreds = ageNet.forward()
        age = ageList[agePreds[0].argmax()]

        label = f"{gender}, {age}"
        cv.putText(frameFace, label, (bbox[0], bbox[1]-10), cv.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2, cv.LINE_AA)

    return frameFace

# Fungsi untuk streaming video dengan ukuran yang sesuai
def video_stream():
    cap = cv.VideoCapture(0, cv.CAP_DSHOW)
    if not cap.isOpened():
        print("Error: Kamera tidak dapat diakses.")
        return

    window_name = "Deteksi Umur dan Jenis Kelamin"
    cv.namedWindow(window_name, cv.WINDOW_NORMAL)

    # Mengambil ukuran asli dari frame
    ret, sample_frame = cap.read()
    if not ret:
        print("Error: Tidak dapat membaca frame awal.")
        return
    frame_height, frame_width = sample_frame.shape[:2]

    # Menyesuaikan ukuran window agar tidak keluar dari layar
    max_width = int(screen_width * 0.75)  # 75% dari lebar layar
    max_height = int(screen_height * 0.75)  # 75% dari tinggi layar
    aspect_ratio = frame_width / frame_height

    if frame_width > max_width or frame_height > max_height:
        if aspect_ratio > 1:  # Lebih lebar dari tinggi
            new_width = max_width
            new_height = int(new_width / aspect_ratio)
        else:  # Lebih tinggi dari lebar
            new_height = max_height
            new_width = int(new_height * aspect_ratio)
    else:
        new_width, new_height = frame_width, frame_height

    cv.resizeWindow(window_name, new_width, new_height)
    cv.moveWindow(window_name, 50, 50)  # Memindahkan agar tidak keluar dari layar

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Tidak dapat membaca frame.")
            break

        frame = age_gender_detector(frame)
        frame_resized = cv.resize(frame, (new_width, new_height))

        cv.imshow(window_name, frame_resized)

        key = cv.waitKey(1) & 0xFF
        if key == ord('q') or key == 27:
            break

    cap.release()
    cv.destroyAllWindows()

# Jalankan streaming video
video_stream()

"""import cv2 as cv
import time

# Load model paths
faceProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\opencv_face_detector.pbtxt"
faceModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\opencv_face_detector_uint8.pb"

ageProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\age_deploy.prototxt"
ageModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\age_net.caffemodel"

genderProto = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\gender_deploy.prototxt"
genderModel = r"C:\Users\HP\Desktop\Age-GenderDet\modelNweight\gender_net.caffemodel"

MODEL_MEAN_VALUES = (78.4263377603, 87.7689143744, 114.895847746)
ageList = ['(0-2 Tahun)', '(4-6 Tahun)', '(8-12 Tahun)', '(15-20 Tahun)', '(25-32 Tahun)', '(38-43 Tahun)', '(48-53 Tahun)', '(60-100 Tahun)']
genderList = ['Pria', 'Wanita']

# Load networks
faceNet = cv.dnn.readNet(faceModel, faceProto)
ageNet = cv.dnn.readNet(ageModel, ageProto)
genderNet = cv.dnn.readNet(genderModel, genderProto)

padding = 5

# Fungsi untuk mendapatkan bounding box wajah
def getFaceBox(net, frame, conf_threshold=0.7):
    frameOpencvDnn = frame.copy()
    frameHeight = frameOpencvDnn.shape[0]
    frameWidth = frameOpencvDnn.shape[1]
    blob = cv.dnn.blobFromImage(frameOpencvDnn, 1.0, (300, 300), [104, 117, 123], True, False)

    net.setInput(blob)
    detections = net.forward()
    bboxes = []
    for i in range(detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        if confidence > conf_threshold:
            x1 = int(detections[0, 0, i, 3] * frameWidth)
            y1 = int(detections[0, 0, i, 4] * frameHeight)
            x2 = int(detections[0, 0, i, 5] * frameWidth)
            y2 = int(detections[0, 0, i, 6] * frameHeight)
            bboxes.append([x1, y1, x2, y2])
            cv.rectangle(frameOpencvDnn, (x1, y1), (x2, y2), (0, 255, 0), int(round(frameHeight/150)), 8)
    return frameOpencvDnn, bboxes

# Fungsi untuk deteksi umur dan gender
def age_gender_detector(frame):
    frameFace, bboxes = getFaceBox(faceNet, frame)
    for bbox in bboxes:
        face = frame[max(0, bbox[1]-padding):min(bbox[3]+padding, frame.shape[0]-1),
                     max(0, bbox[0]-padding):min(bbox[2]+padding, frame.shape[1]-1)]
        blob = cv.dnn.blobFromImage(face, 1.0, (227, 227), MODEL_MEAN_VALUES, swapRB=False)

        genderNet.setInput(blob)
        genderPreds = genderNet.forward()
        gender = genderList[genderPreds[0].argmax()]

        ageNet.setInput(blob)
        agePreds = ageNet.forward()
        age = ageList[agePreds[0].argmax()]

        label = f"{gender}, {age}"
        cv.putText(frameFace, label, (bbox[0], bbox[1]-10), cv.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2, cv.LINE_AA)
    return frameFace

# Fungsi untuk streaming video
def video_stream():
    cap = cv.VideoCapture(0, cv.CAP_DSHOW)  # Gunakan DirectShow agar stabil di Jupyter
    if not cap.isOpened():
        print("Error: Kamera tidak dapat diakses.")
        return

    cv.namedWindow("Deteksi Umur dan Jenis Kelamin", cv.WINDOW_NORMAL)
    cv.setWindowProperty("Deteksi Umur dan Jenis Kelamin", cv.WND_PROP_FULLSCREEN, cv.WINDOW_FULLSCREEN)

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Tidak dapat membaca frame.")
            break

        frame = age_gender_detector(frame)
        cv.imshow("Prediksi Umur dan Jenis Kelamin", frame)

        # Tekan 'q' untuk keluar, atau 'Esc'
        key = cv.waitKey(1) & 0xFF
        if key == ord('q') or key == 27:
            break

    cap.release()
    cv.destroyAllWindows()

# Panggil fungsi untuk menjalankan deteksi real-time
video_stream()

#Ukuran kecil
"""

